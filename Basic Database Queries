##SQL Bolt

 SQL doesn't require you to write the keywords all capitalized, but as a convention, it helps people distinguish SQL keywords from column and tables names, and makes the query easier to read. 

What is a relational Database?
* a collection of related (two dimensional) tables, similar to a spreadsheet with a fixed number of columns and rows
What is a Query?
* a statement that declares what data we are looking for, where to find it, and how to transform it before its returned

To retrieve data from an SQL database, write SELECT.

Select query for a specific columns looks like:

SELECT column, another_column, …
FROM mytable;

To select all of the columns from a table, we use SELECT * FROM mytable;
* SELECT * is useful because it’s a simple way to inspect a table by showing all the data at once if you have a small database

To filter selections of specific types of data, use WHERE

e.g.:
SELECT column, another_column, …
FROM mytable
WHERE condition
    AND/OR another_condition
    AND/OR …;

Other filters include:

=, !=, < <=, >, >=  for (e.g.: col_name != 4)
BETWEEN … AND for (e.g.:col_name BETWEEN 1.5 AND 10.5)
NOT BETWEEN … AND …(e.g.:col_name NOT BETWEEN 1 AND 10IN)
NOT IN (…) (e.g.: col_name NOT IN (1, 3, 5))

All strings must be quoted so that the query parser can distinguish words in the string from SQL keywords.
Case sensitive exact string comparison (notice the single equals) 
	col_name = "abc"

Case Sensitive Operators 

=	Case sensitive exact string comparison (notice the single equals)	col_name = "abc"

!= or <>	Case sensitive exact string inequality comparison	col_name != "abcd"

LIKE	Case insensitive exact string comparison	col_name LIKE "ABC"

NOT LIKE	Case insensitive exact string inequality comparison	col_name NOT LIKE"ABCD"

%	Used anywhere in a string to match a sequence of zero or more characters (only with LIKE or NOT LIKE)	col_name LIKE "%AT%"
(matches "AT", "ATTIC", "CAT" or even "BATS")

_	Used anywhere in a string to match a single character (only with LIKE or NOT LIKE)	col_name LIKE "AN_"
(matches "AND", but not "AN")

IN (…)	String exists in a list	col_name IN ("A", "B", "C")

NOT IN (…)	String does not exist in a list	col_name NOT IN ("D", "E", "F")

The DISTINCT keyword provides a way to get rid of duplicate columns that have the same data. By using GROUP BY allows us to be more specific in what DISTINCT will remove

ORDER BY is useful for large databases to order rows by alpha-numerics. LIMIT and OFFSET is used by ORDER BY to reduce the number of rows your query returns. LIMIT and OFFSET are applied relative to the other parts of a query, they are generally done last after the other clauses have been applied.

* OFFSET excludes the first set of records.
* OFFSET can only be used with an ORDER BY clause.
* OFFSET with FETCH NEXT returns a defined window of records.
* OFFSET with FETCH NEXT is great for building pagination support.

General order for query:
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;

Database normalization minimizes duplicate data in any single table and allows the database to grow independently of each other.
Tables that share data about one entity need to have a primary key that identifies that data uniquely across one database
* auto incrementing integers save space 
* keys can also be a string or hashed value as long as it is unique

INNER JOIN
Matches rows from the two tables that have the same key
* INNER JOIN and JOIN are equivelent 

Example of INNER JOIN:
SELECT column, another_table_column, …
FROM mytable
INNER JOIN another_table 
    ON mytable.id = another_table.id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

When tables have data that connects to more than one table or asymmetric data, you will need to use LEFT JOIN, RIGHT JOIN, or FULL JOIN.

Example of LEFT JOIN/RIGHT JOIN/ FULL JOIN
SELECT column, another_column, …
FROM mytable
INNER/LEFT/RIGHT/FULL JOIN another_table 
    ON mytable.id = another_table.matching_id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

*Searching all buildings, or all car, or all…. whatever that have conditions may return duplicates. Eliminate the duplicates

NULL Values
It’s good to avoid or reduce the possibility of NULL values in your database because they require special attention when constructing queries. 
* Unless, your database needs to store incomplete data, as an alternative, you can create data-type appropriate default values like 0 for numerical data, empty strings for text data, etc. 
To find NULL values use WHERE and IS NULL or IS NOT NULL

Mathmatics 
SELECT title, (domestic_sales + international_sales)/1000000
FROM boxoffice
JOIN movies 
ON id = movie_id;

Aggregate functions
Allow you to summarize information about a group of rows of data

Select Query:
SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression;

Common Aggregate Functions
COUNT(*), COUNT(column)	A common function used to counts the number of rows in the group if no column name is specified. Otherwise, count the number of rows in the group with non-NULL values in the specified column.
MIN(column)	Finds the smallest numerical value in the specified column for all rows in the group.
MAX(column)	Finds the largest numerical value in the specified column for all rows in the group.
AVG(column)	Finds the average numerical value in the specified column for all rows in the group.
SUM(column)	Finds the sum of all numerical values in the specified column for the rows in the group.

HAVING clause further filters GROUP BY clause. 

Complete SELECT query
SELECT DISTINCT column, AGG_FUNC(column_or_expression), …
FROM mytable
    JOIN another_table
      ON mytable.column = another_table.column
    WHERE constraint_expression
    GROUP BY column
    HAVING constraint_expression
    ORDER BY column ASC/DESC
    LIMIT count OFFSET COUNT;


SQL Data Schema describes the structure of each table and the datatypes of each cell
INSERT adds data into a database

Note: Strings need to be in quotes

INSERT INTO mytable
VALUES (value_or_expr, another_value_or_expr, …),
       (value_or_expr_2, another_value_or_expr_2, …),

Insert data into specific columns

INSERT INTO mytable
(column, another_column, …)
VALUES (value_or_expr, another_value_or_expr, …),
      (value_or_expr_2, another_value_or_expr_2, …),
      …;

UPDATE updates existing data. You must specify exactly which table, columns and rows to update. 

UPDATE mytable
SET column = value_or_expr, 
    other_column = another_value_or_expr, 
    …
WHERE condition;

Tip:  tip is to always write the constraint first and test it in a SELECT query to make sure you are updating the right rows, and only then writing the column/value pairs to update.

DELETE removes data from a table in the database

DELETE FROM mytable
WHERE condition;

Warning: if you leave out WHERE condition, you will delete all rows. 

Tip:  tip is to always write the constraint first and test it in a SELECT query to make sure you are updating the right rows, and only then writing the column/value pairs to update. Read twice, execute once. 

CREATE TABLE creates new table

CREATE TABLE IF NOT EXISTS mytable (
    column DataType TableConstraint DEFAULT default_value,
    another_column DataType TableConstraint DEFAULT default_value,
    …
);

If the table name already exists, SQL will throw an error. To avoid the error, use the IF NOT EXISTS clause

Data types 

INTEGER, BOOLEAN	The integer datatypes can store whole integer values like the count of a number or an age. In some implementations, the boolean value is just represented as an integer value of just 0 or 1.
FLOAT, DOUBLE, REAL	The floating point datatypes can store more precise numerical data like measurements or fractional values. Different types can be used depending on the floating point precision required for that value.
CHARACTER(num_chars), VARCHAR(num_chars), TEXT	The text based datatypes can store strings and text in all sorts of locales. The distinction between the various types generally amount to underlaying efficiency of the database when working with these columns.
Both the CHARACTER and VARCHAR (variable character) types are specified with the max number of characters that they can store (longer values may be truncated), so can be more efficient to store and query with big tables.
DATE, DATETIME	SQL can also store date and time stamps to keep track of time series and event data. They can be tricky to work with especially when manipulating data across timezones.
BLOB	Finally, SQL can store binary data in blobs right in the database. These values are often opaque to the database, so you usually have to store them with the right metadata to requery them.

Constraints

PRIMARY KEYThis means that the values in this column are unique, and each value can be used to identify a single row in this table.
AUTOINCREMENTFor integer values, this means that the value is automatically filled in and incremented with each row insertion. Not supported in all databases.
UNIQUEThis means that the values in this column have to be unique, so you can't insert another row with the same value in this column as another row in the table. Differs from the `PRIMARY KEY` in that it doesn't have to be a key for a row in the table.
NOT NULLThis means that the inserted value can not be `NULL`.
CHECK (expression)This is allows you to run a more complex expression to test whether the values inserted are value. For example, you can check that values are positive, or greater than a specific size, or start with a certain prefix, etc.
FOREIGN KEYThis is a consistency check which ensures that each value in this column corresponds to another value in a column in another table.
For example, if there are two tables, one listing all Employees by ID, and another listing their payroll information, the `FOREIGN KEY` can ensure that every row in the payroll table corresponds to a valid employee in the master Employee list.


Example Schema:
Movies table schema
CREATE TABLE movies (
    id INTEGER PRIMARY KEY,
    title TEXT,
    director TEXT,
    year INTEGER, 
    length_minutes INTEGER
);

Example
CREATE TABLE Database (
    Name TEXT,
    Version FLOAT,
    Download_count INTEGER
);

Adding Columns
Specify the data type for the column and any potential constraints

ALTER TABLE mytable
ADD column DataType OptionalTableConstraint 
    DEFAULT default_value;


DROP TABLE (This feature isn’t supported by Podgres and SQLite) 

ALTER TABLE mytable
DROP column_to_be_deleted;

RENAME 

ALTER TABLE mytable
RENAME TO new_table_name;

Example ADD statement with Language Preference

ALTER TABLE Movies
  ADD COLUMN Language TEXT DEFAULT "English";

DROP TABLE removes an entire table. Will throw an error if the table does not exist, add IF EXIST clause to escape this. If you have other tables with foreign keys attached to the table that you want to remove, you will have to update all dependent tables first, to remove those tables entirely. 

DROP TABLE IF EXISTS mytable;

SELECT basics

Check if item exists in list:
SELECT name, population FROM world
  WHERE name IN ('Ireland', 'Iceland', 'Denmark');

Check range 
SELECT name, area FROM world
  WHERE area BETWEEN 200000 AND 250000

Finding Data with %
Examples:
SELECT name FROM world
  WHERE name LIKE '%x%'

SELECT name FROM world
  WHERE name LIKE '%land'

SELECT name FROM world
  WHERE name LIKE 'C%ia'
